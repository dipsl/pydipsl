Search.setIndex({"docnames": ["api", "api/diplang", "api/diplang.datatypes", "api/diplang.nodes", "api/diplang.solvers", "api/modules", "index", "intro", "intro/about", "intro/example", "intro/install", "lexer", "lexer/schema_highliter", "lexer/syntax_highliter", "syntax", "syntax/conditions", "syntax/expressions", "syntax/nodes", "syntax/references", "syntax/units", "syntax/validation", "syntax/values"], "filenames": ["api.rst", "api/diplang.rst", "api/diplang.datatypes.rst", "api/diplang.nodes.rst", "api/diplang.solvers.rst", "api/modules.rst", "index.rst", "intro.rst", "intro/about.rst", "intro/example.rst", "intro/install.rst", "lexer.rst", "lexer/schema_highliter.rst", "lexer/syntax_highliter.rst", "syntax.rst", "syntax/conditions.rst", "syntax/expressions.rst", "syntax/nodes.rst", "syntax/references.rst", "syntax/units.rst", "syntax/validation.rst", "syntax/values.rst"], "titles": ["API", "diplang package", "diplang.datatypes package", "diplang.nodes package", "diplang.solvers package", "diplang", "DIP - Dimensional Input Parameters", "Introduction", "About DIP", "Example of use", "Installation", "Pygments lexer", "Schema highliter", "Syntax highliter", "Syntax", "Conditions", "Expressions", "Nodes", "References", "Units", "Validation", "Values"], "terms": {"diplang": [0, 6, 9, 10], "packag": [0, 5], "datatyp": [1, 3, 5, 6, 8, 9, 17, 20], "dip_typ": [1, 5], "type": [1, 2, 6, 9, 12, 16, 17, 18, 19, 21], "unit": [1, 2, 3, 4, 5, 6, 8, 9, 12, 13, 14, 16, 17, 18, 20, 21], "valu": [1, 2, 3, 6, 8, 9, 12, 14, 17, 18, 19, 20], "dip_type_boolean": [1, 5], "booleantyp": [1, 2, 9], "dtype": [1, 2, 3], "dip_type_float": [1, 5], "floattyp": [1, 2, 9], "dip_type_integ": [1, 5], "integertyp": [1, 2, 9], "dip_type_numb": [1, 5], "numbertyp": [1, 2], "convert": [1, 2, 6, 16, 17, 19, 20], "dip_type_str": [1, 5], "stringtyp": [1, 2], "node": [1, 5, 6, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21], "dip_nod": [1, 5], "cast_valu": [1, 3], "condit": [1, 3, 6, 8, 12, 13, 14, 18, 21], "constant": [1, 3, 6, 8, 12, 13, 14], "inject_valu": [1, 3], "modify_valu": [1, 3], "pars": [1, 3, 5, 6, 7, 8, 15, 17, 18, 19, 21], "set_opt": [1, 3], "set_valu": [1, 3], "slice_valu": [1, 3], "dip_nodebas": [1, 5], "nodebas": [1, 3], "code": [1, 3, 5, 6, 7, 8, 10, 17, 18, 19, 20], "defin": [1, 3, 6, 16, 18, 19, 20, 21], "dimens": [1, 3, 5, 6, 16, 17, 18, 19, 20], "indent": [1, 3, 6, 12, 15, 17, 18, 19, 20, 21], "keyword": [1, 3, 15], "line": [1, 3, 5, 6, 17, 20, 21], "name": [1, 3, 5, 12, 13, 15, 16, 17, 18, 19, 20, 21], "option": [1, 3, 6, 8, 12, 13, 14, 15, 21], "sourc": [1, 3, 5, 6, 8, 9, 10, 12, 13, 18], "units_raw": [1, 3], "value_expr": [1, 3], "value_raw": [1, 3], "value_ref": [1, 3], "value_slic": [1, 3], "dip_node_boolean": [1, 5], "booleannod": [1, 3], "is_nod": [1, 3], "dip_node_cas": [1, 5], "casenod": [1, 3], "dip_node_condit": [1, 5], "conditionnod": [1, 3], "dip_node_const": [1, 5], "constantnod": [1, 3], "dip_node_empti": [1, 5], "emptynod": [1, 3], "dip_node_float": [1, 5], "floatnod": [1, 3], "dip_node_format": [1, 5], "formatnod": [1, 3], "dip_node_group": [1, 5], "groupnod": [1, 3], "dip_node_import": [1, 5], "importnod": [1, 3], "dip_node_integ": [1, 5], "integernod": [1, 3], "dip_node_mod": [1, 5], "modnod": [1, 3], "dip_node_opt": [1, 5], "optionnod": [1, 3], "dip_node_sourc": [1, 5], "sourcenod": [1, 3], "dip_node_str": [1, 5], "stringnod": [1, 3], "format": [1, 3, 6, 8, 9, 12, 13, 14, 16, 21], "dip_node_t": [1, 5], "tablenod": [1, 3], "dip_node_unit": [1, 5], "unitnod": [1, 3], "dip_pars": [1, 5], "parser": [1, 3, 6, 21], "ccode": [1, 3], "comment": [1, 3, 12, 13, 17], "is_empti": [1, 3], "is_pars": [1, 3], "kwd_case": [1, 3], "kwd_condit": [1, 3], "kwd_constant": [1, 3], "kwd_format": [1, 3], "kwd_option": [1, 3], "kwd_sourc": [1, 3], "kwd_unit": [1, 3], "part_com": [1, 3], "part_dimens": [1, 3], "part_equ": [1, 3], "part_express": [1, 3], "part_format": [1, 3], "part_ind": [1, 3], "part_nam": [1, 3], "part_refer": [1, 3], "part_slic": [1, 3], "part_typ": [1, 3], "part_unit": [1, 3], "part_valu": [1, 3], "solver": [1, 5], "dip_solver_log": [1, 5], "logicalsolv": [1, 4], "env": [1, 2, 3, 4, 5], "solv": [1, 4], "dip_solver_numer": [1, 5], "numericalsolv": [1, 4], "equal": [1, 4, 16, 17, 20], "dip_solver_templ": [1, 5], "templatesolv": [1, 4], "dip_solver_unit": [1, 5], "unitsolv": [1, 4], "arbitrari": [1, 3, 4, 5, 19, 20], "base": [1, 2, 3, 4, 5, 8, 14, 17, 20], "custom": [1, 4, 6, 8, 14, 18], "deriv": [1, 4, 14, 16], "nbase": [1, 4], "npbase": [1, 4], "prefix": [1, 4, 14], "class": [1, 2, 3, 4, 9], "environ": [1, 3, 4, 5, 9], "list": [1, 2, 3, 8, 9, 18, 19, 20], "dict": [1, 4], "autoref": [1, 5], "str": [1, 2, 3, 6, 13, 15, 16, 17, 18, 20, 21], "none": [1, 2, 3, 4, 6], "parent_ind": [1, 5], "int": [1, 2, 3, 4, 6, 9, 13, 15, 16, 17, 18, 19, 20, 21], "1": [1, 6, 13, 15, 16, 17, 18, 19, 20, 21], "parent_nam": [1, 5], "case_count": [1, 5], "0": [1, 3, 9, 19, 21], "case_nam": [1, 5], "basemodel": [1, 2, 3, 4], "data": [1, 5, 6, 7, 17, 18, 21], "verbos": 1, "fals": [1, 3, 9, 13, 15, 16, 20, 21], "return": [1, 9, 16, 18], "dictionari": [1, 9], "paramet": [1, 3, 8, 9, 15, 16, 17, 20], "bool": [1, 2, 3, 6, 9, 13, 16, 17, 21], "displai": 1, "onli": [1, 8, 9, 12, 15, 16, 17, 18, 20, 21], "dip": [1, 5, 7, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21], "tupl": [1, 3, 9], "is_cas": [1, 5], "check": [1, 3], "outsid": 1, "insid": 1, "valid": [1, 6, 8, 13, 14, 17, 18, 21], "case": [1, 3, 6, 13, 15, 17, 18, 19, 20], "claus": [1, 15, 20], "pop_nod": [1, 5], "pop": 1, "first": [1, 9, 15, 16, 17, 19], "out": 1, "prepare_nod": [1, 5], "manag": [1, 8], "prepend_nod": [1, 5], "prepend": 1, "new": [1, 9, 18, 19, 20, 21], "queri": [1, 5, 6, 9, 12, 13, 18], "namespac": 1, "select": [1, 9, 18], "local": [1, 6, 8, 18], "accord": [1, 16, 21], "request": [1, 5, 9, 18], "path": [1, 3, 6, 12, 13, 17, 18], "count": 1, "from": [1, 3, 6, 8, 9, 16, 17, 18, 19, 20, 21], "number": [1, 5, 17, 19, 20, 21], "should": [1, 3, 9], "solve_cas": [1, 5], "update_hierarchi": [1, 5], "exclud": [1, 20], "regist": 1, "hierarchi": [1, 13, 14, 15, 18], "ad": [1, 16, 21], "inlin": 1, "object": [1, 3, 9], "us": [1, 3, 6, 7, 8, 10, 15, 16, 17, 18, 19, 20, 21], "string": [1, 4, 8, 9, 16, 17, 18, 20, 21], "load": [1, 5, 6, 9], "filepath": 1, "file": [1, 6, 9, 12, 13, 18], "num": [1, 5, 16, 19], "dfn": [1, 5], "symbol": [1, 5, 19], "symbol_bas": [1, 5], "copi": [1, 5], "duplic": 1, "model": 1, "choos": 1, "which": [1, 17, 18, 20], "field": [1, 21], "includ": [1, 18], "chang": 1, "thi": [1, 2, 6, 8, 9, 10, 15, 17, 18, 19, 20, 21], "take": [1, 3], "preced": 1, "over": [1, 17, 21], "updat": 1, "add": [1, 9, 18], "note": [1, 18], "i": [1, 3, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21], "befor": [1, 17], "creat": [1, 6, 9, 18], "you": 1, "trust": 1, "deep": 1, "set": [1, 3, 6, 8, 9, 17, 18, 20, 21], "true": [1, 3, 6, 9, 13, 15, 16, 20, 21], "make": [1, 6, 18], "instanc": [1, 9], "eqdim": [1, 5], "other": [1, 6, 8, 9, 13, 16, 18, 20], "eqnum": [1, 5], "inunitsof": [1, 5], "isnumer": [1, 5], "float": [1, 2, 3, 6, 8, 9, 13, 16, 17, 18, 19, 20, 21], "convert_arbitrari": [1, 5], "unit1": 1, "unit2": 1, "alia": [2, 3], "cast": [3, 16], "raw": 3, "self": [3, 18, 20], "anoth": [3, 17], "inject": [3, 8, 14], "remot": [3, 8, 18], "modifi": [3, 17, 18, 19, 20, 21], "differ": [3, 6, 13, 16, 17, 19, 20], "slice": [3, 12, 18], "part": [3, 18], "If": [3, 15, 16, 17, 19, 20, 21], "current": [3, 8, 18], "taken": [3, 15], "static": 3, "empti": [3, 16, 17, 19, 20, 21], "bit": [3, 21], "64": [3, 21], "group": [3, 13, 17], "import": [3, 6, 8, 9, 10, 14], "32": [3, 21], "mod": 3, "tabl": [3, 8, 13, 14, 16, 18, 19], "direct": [3, 15, 19, 20], "wa": [3, 6, 8, 9, 13], "alreadi": [3, 8, 17, 18, 19], "expr": [4, 16, 19], "expr1": 4, "expr2": 4, "in_unit": 4, "right": 4, "expr_bak": 4, "subpackag": 5, "submodul": 5, "modul": [5, 6, 8, 9, 10], "content": [5, 18], "dip_environ": [5, 6, 9], "dip_main": 5, "dip_set": 5, "dip_unit": 5, "dip_unitlist": 5, "your": [6, 10], "tastier": 6, "serv": [6, 19], "nice": 6, "introduct": 6, "about": [6, 7, 17], "instal": [6, 7], "exampl": [6, 7, 10, 16, 17, 18, 19, 20], "syntax": [6, 8, 11, 16, 17], "refer": [6, 8, 9, 13, 14, 16, 19, 20], "express": [6, 8, 12, 13, 14, 15, 19, 20], "api": 6, "pygment": [6, 8, 13], "lexer": [6, 12, 13], "highlit": [6, 11], "schema": [6, 11, 15, 16, 17, 18, 19, 20], "welcom": [6, 8], "document": [6, 8, 9], "specif": [6, 18, 20], "design": [6, 8, 12], "massiv": 6, "parallel": 6, "physic": [6, 8, 19], "mathemat": [6, 16], "engen": [6, 8], "ar": [6, 8, 9, 10, 13, 15, 16, 17, 18, 19, 20, 21], "mostli": 6, "written": [6, 9, 17, 19, 21], "c": [6, 8, 13, 16, 17, 19], "fortran": [6, 8], "Such": 6, "requir": [6, 15, 16, 20], "multipl": [6, 9, 15, 16, 17, 18, 19, 21], "quantiti": [6, 19], "compil": [6, 8], "flag": [6, 8], "precis": 6, "variabl": [6, 9], "In": [6, 8, 9, 13, 17, 18, 19, 20], "larg": [6, 18, 20, 21], "project": [6, 8, 10], "can": [6, 9, 10, 15, 16, 17, 18, 19, 20, 21], "get": [6, 7], "quickli": 6, "messi": 6, "confus": 6, "especi": 6, "when": [6, 18, 19], "sever": [6, 20, 21], "pre": 6, "processor": 6, "bash": 6, "shell": 6, "environment": [6, 9], "csv": [6, 21], "json": [6, 21], "yaml": 6, "toml": 6, "similar": [6, 16, 18, 19, 21], "notat": [6, 16, 17, 18, 19, 20, 21], "adjust": 6, "explicit": [6, 19, 20], "proper": [6, 8], "numer": [6, 8, 14, 18, 19, 20, 21], "The": [6, 9, 13, 15, 16, 17, 18, 19, 20], "most": [6, 12, 16, 19], "notabl": 6, "featur": [6, 8, 18], "languag": [6, 8, 9, 12, 13, 16, 17, 19], "definit": [6, 8, 12, 13, 14, 16, 18, 19, 20, 21], "weight": [6, 13, 16, 17, 18, 19, 21], "56": 6, "kg": [6, 13, 16, 17, 18, 19, 21], "veloc": [6, 18, 19, 21], "78": 6, "km": [6, 18, 19, 21], "": [6, 8, 13, 15, 16, 17, 18, 19, 21], "hierarch": [6, 8, 17], "structur": [6, 8, 17], "human": 6, "head": 6, "nose": 6, "ey": 6, "2": [6, 13, 15, 16, 18, 19, 20, 21], "modif": [6, 8, 13, 14, 18, 19, 20], "3": [6, 9, 13, 15, 16, 17, 18, 19, 20, 21], "automat": [6, 8, 13, 16, 19, 21], "convers": [6, 8, 19], "energi": [6, 16, 19, 20], "j": [6, 19, 20], "4": [6, 13, 16, 18, 19, 21], "erg": [6, 19, 20], "4e": [6, 20], "7": [6, 19, 20, 21], "geometri": [6, 9], "plane": 6, "volum": 6, "inclus": 6, "extern": [6, 18], "wine": 6, "txt": [6, 18], "veggi": 6, "veget": 6, "fruit": [6, 18], "basket": 6, "pear": 6, "legum": 6, "serial": 6, "intens": [6, 21], "23": [6, 13, 16, 18, 19, 20, 21], "w": [6, 19, 21], "m2": [6, 19, 21], "els": [6, 13, 15], "cg": [6, 8], "length": [6, 13, 17, 19], "cm": [6, 13, 16, 17, 18, 19], "mass": [6, 18, 19, 21], "g": [6, 13, 17, 19, 20], "time": [6, 18, 19, 21], "mk": 6, "m": [6, 16, 18, 19], "end": [6, 8, 13, 15, 17, 18, 21], "modular": 6, "search": 6, "p": [6, 19], "laser": 6, "1e25": 6, "radiat": [6, 9], "gravit": 6, "laser_set": 6, "radiation_pressur": 6, "pressur": [6, 18, 19], "nativ": [6, 8], "python": [6, 8, 9, 10, 13, 16, 17, 18, 20, 21], "todo": 6, "templat": [6, 8, 14, 19], "e": [6, 16, 17, 19, 20], "produc": 6, "support": [6, 8, 16, 17, 19], "tabular": [6, 21], "intput": 6, "mani": [6, 13], "side": 6, "doe": [6, 15, 16, 19], "have": [6, 9, 15, 16, 17, 18, 19, 20, 21], "ani": [6, 8, 15, 17, 21], "particular": [6, 9, 20], "develop": [6, 8], "team": 6, "kind": [6, 8], "help": [6, 8], "highli": 6, "appreci": 6, "index": 6, "page": 6, "minimalist": 8, "program": [8, 13, 16], "spetial": 8, "dimension": [8, 16, 17, 19, 20, 21], "initi": [8, 18, 20], "It": [8, 9, 13, 17, 18, 19, 20], "origin": [8, 17], "subproject": 8, "proprietari": 8, "fusion": 8, "nevertheless": [8, 17], "due": 8, "potenti": [8, 19], "also": [8, 15, 16, 17, 18, 19, 20, 21], "we": [8, 17, 18, 19, 20], "publish": 8, "an": [8, 9, 13, 15, 17, 18, 19, 20, 21], "open": 8, "astrophys": 8, "usual": [8, 20], "depend": [8, 16, 18], "descript": [8, 16, 17, 19], "often": [8, 20], "poorli": 8, "prone": 8, "error": [8, 19, 20], "wrong": 8, "input": [8, 20], "lack": 8, "adress": 8, "issu": 8, "provid": [8, 15, 16], "standard": [8, 16, 18, 19, 20, 21], "scalabl": 8, "interfac": 8, "between": [8, 17, 21], "user": [8, 18], "long": [8, 17, 20], "run": 8, "aim": [8, 16], "becom": 8, "tool": [8, 16, 20], "flatten": 8, "learn": 8, "curv": 8, "follow": [8, 10, 12, 16, 17, 18, 19, 20], "implement": [8, 9, 16], "version": [8, 16], "declar": [8, 13, 14, 19, 20, 21], "boolean": [8, 16, 17, 20, 21], "integ": [8, 17, 18, 19, 21], "scalar": [8, 13, 14, 16], "arrai": [8, 13, 14, 16, 18, 19, 20], "block": [8, 12, 14, 16, 17, 18], "logic": [8, 14, 15, 17, 19, 20], "si": 8, "dure": [8, 20], "branch": [8, 15], "highlight": [8, 12, 13], "still": 8, "beta": 8, "stage": 8, "gole": 8, "below": [8, 13, 16, 18, 19, 20, 21], "yet": 8, "need": [8, 17], "codevelop": 8, "calcul": [8, 19], "gener": [8, 13, 16, 20], "sphinx": 8, "collabor": 8, "suggest": 8, "further": [8, 17, 20], "hearthli": 8, "under": [8, 20], "mit": 8, "licens": 8, "kindli": 8, "ask": 8, "main": [9, 10, 15, 17, 18], "For": [9, 15, 21], "look": 9, "correspond": [9, 15, 19, 20, 21], "A": [9, 16, 18, 19], "step": 9, "its": [9, 13, 15, 16, 18, 21], "combin": [9, 19, 20], "one": [9, 13, 15, 16, 17, 18, 20, 21], "contain": [9, 18, 20], "extent": 9, "otherwis": [9, 17], "thei": [9, 17, 18, 19, 20], "interpret": [9, 13, 16], "normal": [9, 17], "text": [9, 13, 16, 18, 21], "runtim": 9, "t_max": 9, "10": [9, 19, 20, 21], "n": [9, 19], "timestep": 9, "01": [9, 16, 18], "box": 9, "size": [9, 17, 18], "x": 9, "nm": 9, "y": [9, 19], "3e7": 9, "heat": 9, "recommendet": 9, "statement": 9, "mpi": 9, "36": 9, "core": 9, "96": 9, "env1": 9, "store": [9, 21], "easili": [9, 16, 18], "transfer": 9, "immediatelli": [9, 20], "without": [9, 16, 17, 18, 19, 21], "addit": [9, 16], "pass": 9, "env2": 9, "method": 9, "geom": 9, "abov": [9, 15, 17, 18, 20, 21], "two": [9, 15, 16, 17, 18, 19, 20], "all": [9, 12, 13, 15, 16, 17, 18, 19, 20, 21], "same": [9, 16, 17, 18, 19, 20], "umber": 9, "avail": 10, "github": 10, "repositori": 10, "cd": [10, 19], "git": 10, "clone": 10, "http": 10, "com": 10, "vrtulka23": 10, "export": 10, "pythonpath": 10, "home": 10, "src": 10, "more": [10, 16, 17, 18], "section": [10, 19, 20], "basic": [12, 17, 19], "concept": [12, 13], "dip_lexer_schema": 12, "py": [12, 13], "sumar": 12, "posibl": [12, 15], "share": [13, 17, 19], "commong": 13, "like": 13, "howev": [13, 16, 17, 18, 19, 20], "enough": 13, "caus": 13, "problem": 13, "therefor": [13, 16], "come": 13, "own": [13, 18], "dip_lexer_syntax": 13, "style": 13, "dip_lexer_styl": 13, "overview": [13, 21], "capabl": 13, "start": [13, 15, 16, 17, 20, 21], "curli": [13, 16], "bracket": [13, 16, 19, 21], "order": [13, 17, 20], "plain": [13, 16], "ha": [13, 15, 16, 18, 19, 20], "escap": 13, "them": [13, 16], "slash": 13, "sign": [13, 17, 20, 21], "omit": [13, 15, 17], "more_word": 13, "stuff34": 13, "foo": 13, "bar": 13, "43": [13, 16, 20], "b": [13, 16], "d": [13, 19], "12": [13, 16, 19, 21], "3e23": 13, "3e": [13, 16, 20], "pow": [13, 16], "const": [13, 16, 19], "id": [13, 16, 21], "05d": [13, 16], "surnam": [13, 16, 18], "5": [13, 16, 18, 21], "width": [13, 16], "2e": [13, 16], "6": [13, 16, 19, 20, 21], "john": [13, 15, 17, 20, 21], "peter": [13, 17, 21], "simon": [13, 21], "28": [13, 19], "83": 13, "29": 13, "30": [13, 19], "za": [13, 20], "z": [13, 19, 20], "26": [13, 20], "special": [13, 15, 17, 19, 20, 21], "init": [13, 18], "winner": [13, 15], "famili": [13, 17], "smith": [13, 16, 18], "parent": [13, 15, 17, 20], "father": [13, 17], "mother": 13, "mari": [13, 20], "children": [13, 15, 17, 18], "infant": 13, "9": [13, 19, 21], "consecut": 15, "necessari": [15, 21], "second": [15, 16, 19], "There": [15, 16, 17], "child": [15, 17], "must": [15, 16, 17, 20], "higher": [15, 20], "than": [15, 16, 20], "each": [15, 17, 19, 20, 21], "argument": 15, "result": [15, 16, 17, 18], "evalu": [15, 16, 20], "termin": 15, "skip": 15, "subsequ": [15, 17, 19], "test": [15, 16], "purpous": 15, "instead": [15, 18], "veri": [15, 21], "previou": [15, 19], "whose": 15, "separ": [15, 16, 17, 18, 20, 21], "singl": [15, 17, 18, 19, 20, 21], "after": [15, 17, 20, 21], "last": [15, 18], "jenni": 15, "default": [15, 16, 19], "jona": 15, "toi": 15, "doll": 15, "robot": 15, "nest": [15, 16, 21], "flower": 15, "rose": 15, "dandelion": 15, "color": 15, "red": 15, "blue": 15, "leav": 15, "234": [15, 19, 20, 21], "yellow": 15, "tree": 15, "mapl": 15, "even": 15, "though": 15, "effect": 15, "indirectli": 16, "wrap": [16, 17, 19, 20, 21], "doubl": [16, 17, 21], "quot": [16, 17, 21], "three": [16, 19], "textual": 16, "describ": [16, 17, 19, 20], "chapter": [16, 17, 18, 19], "least": [16, 17, 21], "space": [16, 17, 19, 21], "possibl": [16, 17, 18, 19, 20, 21], "summar": [16, 19, 20], "24": [16, 19], "ref": [16, 18], "prioriti": 16, "accordingli": [16, 17], "compos": 16, "alwai": [16, 17, 18], "given": [16, 17, 19, 20, 21], "either": [16, 17, 18], "directli": [16, 17, 18, 19, 20], "OR": 16, "AND": 16, "thread": 16, "compar": 16, "At": 16, "moment": 16, "plan": 16, "next": [16, 21], "numera": 16, "up": [16, 19], "equal_precis": 16, "inequ": 16, "do": [16, 17, 18, 21], "greater": 16, "smaller": 16, "greather": 16, "negat": 16, "exist": [16, 19], "non": [16, 17, 21], "299792458": [16, 19], "ev": [16, 19], "79751": 16, "substitu": 16, "advanc": 16, "suppos": 16, "give": 16, "quick": 16, "futur": 16, "substract": 16, "divis": [16, 19], "final": [16, 17, 18, 20, 21], "exp": 16, "exponenti": 16, "dimensionless": 16, "risen": 16, "power": [16, 19], "ln": 16, "natur": 16, "logarithm": 16, "log10": 16, "common": [16, 17], "dimmensionless": 16, "sin": 16, "sine": 16, "co": 16, "cosin": 16, "form": [16, 17, 19, 21], "345": 16, "tina": 16, "bodi": 16, "62": 16, "height": [16, 19], "177": 16, "marri": 16, "person": [16, 18], "2f": 16, "00345": 16, "230e": 16, "00": 16, "specifi": [16, 17, 18, 20, 21], "function": [16, 17], "Will": [16, 18], "235": 16, "34": [16, 18, 19, 20, 21], "1e10": 16, "2e23": 16, "5e20": 16, "preview": 16, "00e": 16, "354e": 16, "02": 16, "400e": [16, 18], "000e": [16, 18], "20": 16, "member": 17, "interchang": 17, "begin": 17, "determin": [17, 19], "consist": [17, 18, 19, 20, 21], "zero": [17, 19], "letter": [17, 20], "underscor": 17, "hyphen": 17, "dot": 17, "becaus": [17, 18, 19], "four": [17, 21], "principl": [17, 19], "extend": 17, "match": [17, 18, 20], "those": [17, 20], "left": 17, "charact": [17, 20], "span": [17, 21], "detail": 17, "subsect": 17, "respect": 17, "hash": 17, "occur": 17, "call": [17, 20, 21], "One": [17, 18], "70": 17, "80": [17, 19], "90": [17, 19], "100": [17, 19], "pc": [17, 19], "086e18": 17, "where": 17, "later": 17, "88": 17, "organ": 17, "wai": [17, 18, 21], "lower": 17, "sibl": 17, "level": 17, "allow": [17, 20], "vari": 17, "grandfath": 17, "cintia": 17, "ben": 17, "lucia": 17, "son": 17, "benjamin": 17, "daughter": 17, "aunt": 17, "both": [17, 18, 19], "besid": [17, 18], "arrang": 17, "carri": 17, "nor": 17, "Their": 17, "enter": 17, "transform": 17, "plu": 17, "dog": [17, 20], "lassi": 17, "referenc": 18, "enabl": 18, "reusabl": 18, "url": 18, "question": 18, "mark": [18, 21], "onc": 18, "context": 18, "simpl": [18, 19], "domain": 18, "were": 18, "complet": 18, "process": 18, "independ": 18, "querri": 18, "full": 18, "asterix": 18, "applic": 18, "some": [18, 19, 20], "locat": 18, "explain": 18, "insert": 18, "embed": 18, "shown": 18, "icecream": 18, "waffl": 18, "scoop": 18, "strawberri": 18, "chocol": 18, "bowl": 18, "plate": 18, "work": 18, "just": 18, "front": 18, "bag": 18, "vegi": 18, "potato": 18, "subnod": 18, "so": [18, 19], "far": [18, 19], "how": [18, 19], "regular": [18, 20], "dynam": 18, "script": 18, "via": 18, "whole": 18, "size1": 18, "size2": 18, "size3": 18, "3400": 18, "magnet": 18, "host": 18, "adopt": [18, 19], "1e34": 18, "mysiz": 18, "rang": [18, 20], "mymass": 18, "334e": 18, "keep": 18, "readabl": 18, "edit": 18, "output": [18, 21], "messag": [18, 20], "comparison": [18, 19], "adit": 18, "scalablil": 18, "markup": 19, "nomenclatur": 19, "sensit": 19, "unifi": 19, "measur": 19, "assign": 19, "assum": 19, "ag": 19, "185": 19, "35": 19, "190": 19, "90000": 19, "point": 19, "nv": 19, "msr": 19, "1e": 19, "ten": 19, "meter": 19, "gram": 19, "k": 19, "kelvin": 19, "coulomb": 19, "candela": 19, "mol": 19, "mole": 19, "rad": 19, "radian": 19, "mr": 19, "newton": 19, "except": [19, 20], "dimenson": 19, "rais": [19, 20], "1e3": [19, 21], "corespond": 19, "yotta": 19, "1e24": 19, "zetta": 19, "1e21": 19, "21": 19, "exa": 19, "1e18": 19, "18": 19, "peta": 19, "1e15": 19, "15": [19, 21], "t": 19, "tera": 19, "1e12": 19, "giga": 19, "1e9": 19, "mega": 19, "1e6": 19, "kilo": 19, "h": 19, "hecto": 19, "1e2": 19, "da": 19, "deka": 19, "1e1": 19, "deci": 19, "centi": 19, "milli": 19, "u": 19, "micro": 19, "nano": 19, "pico": 19, "f": 19, "femto": 19, "atto": 19, "zepto": 19, "yocto": 19, "As": 19, "mention": 19, "foruth": 19, "plai": 19, "promin": 19, "role": 19, "integr": 19, "close": 19, "pu": 19, "rad2": 19, "real": 19, "s2": 19, "parenthesi": 19, "thu": 19, "cannot": [19, 20], "101": 19, "pa": 19, "distanc": [19, 21], "123": 19, "60": 19, "8": [19, 21], "3e2": 19, "simpli": 19, "sum": 19, "multipli": 19, "divid": 19, "progenitor": 19, "correspondingli": 19, "rebas": 19, "multipi": 19, "squar": 19, "m_p": 19, "ensur": 19, "coincid": 19, "sr": 19, "steradian": 19, "hz": 19, "hertz": 19, "pascal": 19, "joul": 19, "watt": 19, "amper": 19, "v": 19, "volt": 19, "farad": 19, "ohm": 19, "siemen": 19, "wb": 19, "weber": 19, "tesla": 19, "henri": 19, "lm": 19, "lumen": 19, "lx": 19, "lux": 19, "bq": 19, "becquerel": 19, "gy": 19, "grai": 19, "sv": 19, "sivert": 19, "dyn": 19, "dyne": 19, "gauss": 19, "deg": 19, "angl": 19, "degre": 19, "pi": 19, "360": 19, "minut": 19, "l": 19, "liter": 19, "dm3": 19, "min": 19, "hour": 19, "dai": [19, 21], "a_t": 19, "tropic": 19, "year": [19, 21], "365": 19, "24219": 19, "a_j": 19, "julian": 19, "25": [19, 20, 21], "a_g": 19, "gregorian": 19, "2425": 19, "electronvolt": 19, "au": 19, "astr": 19, "149597": 19, "870691": 19, "mm": 19, "light": 19, "planck": 19, "6260755e": 19, "boltzmann": 19, "380658e": 19, "eps_0": 19, "permit": 19, "vac": 19, "854187817e": 19, "mu_0": 19, "permeab": 19, "a2": 19, "elem": 19, "charg": 19, "60217733e": 19, "19": 19, "m_e": 19, "electron": 19, "1093897e": 19, "proton": 19, "6726231e": 19, "grav": 19, "67259e": 19, "11": [19, 21], "m3": 19, "accel": 19, "80665": 19, "atm": 19, "101325": 19, "ly": 19, "141593": 19, "euler": 19, "718282": 19, "n_a": 19, "avogadro": 19, "022137e23": 19, "percent": 19, "ppth": 19, "promil": 19, "similarili": 19, "achiev": [19, 20], "densiti": 19, "lenght": 19, "restrict": 20, "accept": 20, "small": 20, "discret": 20, "These": 20, "implicit": 20, "individu": [20, 21], "coordin": 20, "carthesian": 20, "polar": 20, "spheric": 20, "throw": 20, "anim": [20, 21], "cat": 20, "hors": 20, "too": 20, "practic": 20, "write": 20, "shorthand": 20, "expect": 20, "similiarili": 20, "defininit": 20, "against": 20, "45": 20, "490": 20, "1939": 20, "34e": 20, "interv": 20, "actual": 20, "quotemark": 20, "capit": 20, "ferdin": 20, "sometim": [20, 21], "stai": 20, "follw": 20, "expampl": 20, "night": 21, "2023": 21, "durat": 21, "3e20": 21, "scientif": 21, "word": 21, "citi": 21, "york": 21, "countri": 21, "kingdom": 21, "hanl": 21, "data1": 21, "exactli": 21, "data2": 21, "data3": 21, "34e4": 21, "data4": 21, "maximum": 21, "tight": 21, "want": 21, "loos": 21, "multidimension": 21, "matrix": 21, "appli": 21, "50": 21, "95": 21, "1e4": 21, "trippl": 21, "simiarili": 21, "13": 21, "14": 21, "16": 21, "lorem": 21, "ipsum": 21, "dolor": 21, "sit": 21, "amet": 21, "consectetur": 21, "adipisc": 21, "elit": 21, "sed": 21, "eiusmod": 21, "tempor": 21, "incididunt": 21, "ut": 21, "labor": 21, "et": 21, "magna": 21, "aliqua": 21, "enim": 21, "minim": 21, "veniam": 21, "qui": 21, "nostrud": 21, "exercit": 21, "ullamco": 21, "labori": 21, "nisi": 21, "aliquip": 21, "ex": 21, "ea": 21, "commodo": 21, "consequat": 21, "dui": 21, "aut": 21, "irur": 21, "reprehenderit": 21, "volupt": 21, "velit": 21, "ess": 21, "cillum": 21, "eu": 21, "fugiat": 21, "nulla": 21, "pariatur": 21, "excepteur": 21, "sint": 21, "occaecat": 21, "cupidatat": 21, "proident": 21, "sunt": 21, "culpa": 21, "officia": 21, "deserunt": 21, "mollit": 21, "est": 21, "laborum": 21, "easier": 21, "comprendi": 21, "put": 21, "amount": 21, "reason": 21, "tabul": 21, "header": 21, "column": 21, "snapshot": 21, "355": 21, "535": 21, "255": 21, "455": 21, "equival": 21}, "objects": {"": [[1, 0, 0, "-", "diplang"]], "diplang": [[1, 0, 0, "-", "DIP_Environment"], [1, 0, 0, "-", "DIP_Main"], [1, 0, 0, "-", "DIP_Settings"], [1, 0, 0, "-", "DIP_Unit"], [1, 0, 0, "-", "DIP_UnitList"], [2, 0, 0, "-", "datatypes"], [3, 0, 0, "-", "nodes"], [4, 0, 0, "-", "solvers"]], "diplang.DIP_Environment": [[1, 1, 1, "", "Environment"]], "diplang.DIP_Environment.Environment": [[1, 2, 1, "", "autoref"], [1, 2, 1, "", "case_counts"], [1, 2, 1, "", "case_names"], [1, 3, 1, "", "data"], [1, 3, 1, "", "is_case"], [1, 2, 1, "", "nodes"], [1, 2, 1, "", "parent_indents"], [1, 2, 1, "", "parent_names"], [1, 3, 1, "", "pop_node"], [1, 3, 1, "", "prepare_node"], [1, 3, 1, "", "prepend_nodes"], [1, 3, 1, "", "query"], [1, 3, 1, "", "request"], [1, 3, 1, "", "solve_case"], [1, 2, 1, "", "sources"], [1, 2, 1, "", "units"], [1, 3, 1, "", "update_hierarchy"]], "diplang.DIP_Main": [[1, 1, 1, "", "DIP"]], "diplang.DIP_Main.DIP": [[1, 3, 1, "", "code"], [1, 2, 1, "", "env"], [1, 2, 1, "", "lines"], [1, 3, 1, "", "load"], [1, 3, 1, "", "parse"], [1, 2, 1, "", "source"]], "diplang.DIP_Unit": [[1, 1, 1, "", "Unit"]], "diplang.DIP_Unit.Unit": [[1, 2, 1, "", "arbitrary"], [1, 2, 1, "", "base"], [1, 3, 1, "", "copy"], [1, 2, 1, "", "dfn"], [1, 3, 1, "", "dimension"], [1, 3, 1, "", "eqdim"], [1, 3, 1, "", "eqnum"], [1, 3, 1, "", "inunitsof"], [1, 3, 1, "", "isnumeric"], [1, 2, 1, "", "name"], [1, 2, 1, "", "num"], [1, 3, 1, "", "number"], [1, 2, 1, "", "symbol"], [1, 2, 1, "", "symbol_base"]], "diplang.DIP_UnitList": [[1, 4, 1, "", "Convert_Arbitrary"]], "diplang.datatypes": [[2, 0, 0, "-", "DIP_Type"], [2, 0, 0, "-", "DIP_Type_Boolean"], [2, 0, 0, "-", "DIP_Type_Float"], [2, 0, 0, "-", "DIP_Type_Integer"], [2, 0, 0, "-", "DIP_Type_Number"], [2, 0, 0, "-", "DIP_Type_String"]], "diplang.datatypes.DIP_Type": [[2, 1, 1, "", "Type"]], "diplang.datatypes.DIP_Type.Type": [[2, 2, 1, "", "unit"], [2, 2, 1, "", "value"]], "diplang.datatypes.DIP_Type_Boolean": [[2, 1, 1, "", "BooleanType"]], "diplang.datatypes.DIP_Type_Boolean.BooleanType": [[2, 2, 1, "", "dtype"], [2, 2, 1, "", "value"]], "diplang.datatypes.DIP_Type_Float": [[2, 1, 1, "", "FloatType"]], "diplang.datatypes.DIP_Type_Float.FloatType": [[2, 2, 1, "", "dtype"], [2, 2, 1, "", "value"]], "diplang.datatypes.DIP_Type_Integer": [[2, 1, 1, "", "IntegerType"]], "diplang.datatypes.DIP_Type_Integer.IntegerType": [[2, 2, 1, "", "dtype"], [2, 2, 1, "", "value"]], "diplang.datatypes.DIP_Type_Number": [[2, 1, 1, "", "NumberType"]], "diplang.datatypes.DIP_Type_Number.NumberType": [[2, 3, 1, "", "convert"]], "diplang.datatypes.DIP_Type_String": [[2, 1, 1, "", "StringType"]], "diplang.datatypes.DIP_Type_String.StringType": [[2, 2, 1, "", "dtype"], [2, 2, 1, "", "value"]], "diplang.nodes": [[3, 0, 0, "-", "DIP_Node"], [3, 0, 0, "-", "DIP_NodeBase"], [3, 0, 0, "-", "DIP_Node_Boolean"], [3, 0, 0, "-", "DIP_Node_Case"], [3, 0, 0, "-", "DIP_Node_Condition"], [3, 0, 0, "-", "DIP_Node_Constant"], [3, 0, 0, "-", "DIP_Node_Empty"], [3, 0, 0, "-", "DIP_Node_Float"], [3, 0, 0, "-", "DIP_Node_Format"], [3, 0, 0, "-", "DIP_Node_Group"], [3, 0, 0, "-", "DIP_Node_Import"], [3, 0, 0, "-", "DIP_Node_Integer"], [3, 0, 0, "-", "DIP_Node_Mod"], [3, 0, 0, "-", "DIP_Node_Option"], [3, 0, 0, "-", "DIP_Node_Source"], [3, 0, 0, "-", "DIP_Node_String"], [3, 0, 0, "-", "DIP_Node_Table"], [3, 0, 0, "-", "DIP_Node_Unit"], [3, 0, 0, "-", "DIP_Parser"]], "diplang.nodes.DIP_Node": [[3, 1, 1, "", "Node"]], "diplang.nodes.DIP_Node.Node": [[3, 3, 1, "", "cast_value"], [3, 2, 1, "", "condition"], [3, 2, 1, "", "constant"], [3, 3, 1, "", "inject_value"], [3, 3, 1, "", "modify_value"], [3, 3, 1, "", "parse"], [3, 3, 1, "", "set_option"], [3, 3, 1, "", "set_value"], [3, 3, 1, "", "slice_value"], [3, 2, 1, "", "value"]], "diplang.nodes.DIP_NodeBase": [[3, 1, 1, "", "NodeBase"]], "diplang.nodes.DIP_NodeBase.NodeBase": [[3, 2, 1, "", "code"], [3, 2, 1, "", "defined"], [3, 2, 1, "", "dimension"], [3, 2, 1, "", "dtype"], [3, 2, 1, "", "indent"], [3, 2, 1, "", "keyword"], [3, 2, 1, "", "line"], [3, 2, 1, "", "name"], [3, 2, 1, "", "options"], [3, 2, 1, "", "source"], [3, 2, 1, "", "units_raw"], [3, 2, 1, "", "value_expr"], [3, 2, 1, "", "value_raw"], [3, 2, 1, "", "value_ref"], [3, 2, 1, "", "value_slice"]], "diplang.nodes.DIP_Node_Boolean": [[3, 1, 1, "", "BooleanNode"]], "diplang.nodes.DIP_Node_Boolean.BooleanNode": [[3, 2, 1, "", "dtype"], [3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"], [3, 3, 1, "", "parse"], [3, 3, 1, "", "set_value"], [3, 2, 1, "", "value"]], "diplang.nodes.DIP_Node_Case": [[3, 1, 1, "", "CaseNode"]], "diplang.nodes.DIP_Node_Case.CaseNode": [[3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"], [3, 3, 1, "", "parse"]], "diplang.nodes.DIP_Node_Condition": [[3, 1, 1, "", "ConditionNode"]], "diplang.nodes.DIP_Node_Condition.ConditionNode": [[3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"], [3, 3, 1, "", "parse"]], "diplang.nodes.DIP_Node_Constant": [[3, 1, 1, "", "ConstantNode"]], "diplang.nodes.DIP_Node_Constant.ConstantNode": [[3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"], [3, 3, 1, "", "parse"]], "diplang.nodes.DIP_Node_Empty": [[3, 1, 1, "", "EmptyNode"]], "diplang.nodes.DIP_Node_Empty.EmptyNode": [[3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"]], "diplang.nodes.DIP_Node_Float": [[3, 1, 1, "", "FloatNode"]], "diplang.nodes.DIP_Node_Float.FloatNode": [[3, 2, 1, "", "dtype"], [3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"], [3, 2, 1, "", "options"], [3, 3, 1, "", "parse"], [3, 3, 1, "", "set_value"], [3, 2, 1, "", "value"], [3, 2, 1, "", "value_expr"]], "diplang.nodes.DIP_Node_Format": [[3, 1, 1, "", "FormatNode"]], "diplang.nodes.DIP_Node_Format.FormatNode": [[3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"], [3, 3, 1, "", "parse"]], "diplang.nodes.DIP_Node_Group": [[3, 1, 1, "", "GroupNode"]], "diplang.nodes.DIP_Node_Group.GroupNode": [[3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"]], "diplang.nodes.DIP_Node_Import": [[3, 1, 1, "", "ImportNode"]], "diplang.nodes.DIP_Node_Import.ImportNode": [[3, 3, 1, "", "inject_value"], [3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"], [3, 3, 1, "", "parse"]], "diplang.nodes.DIP_Node_Integer": [[3, 1, 1, "", "IntegerNode"]], "diplang.nodes.DIP_Node_Integer.IntegerNode": [[3, 2, 1, "", "dtype"], [3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"], [3, 2, 1, "", "options"], [3, 3, 1, "", "parse"], [3, 3, 1, "", "set_value"], [3, 2, 1, "", "value"], [3, 2, 1, "", "value_expr"]], "diplang.nodes.DIP_Node_Mod": [[3, 1, 1, "", "ModNode"]], "diplang.nodes.DIP_Node_Mod.ModNode": [[3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"], [3, 3, 1, "", "parse"]], "diplang.nodes.DIP_Node_Option": [[3, 1, 1, "", "OptionNode"]], "diplang.nodes.DIP_Node_Option.OptionNode": [[3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"], [3, 3, 1, "", "parse"]], "diplang.nodes.DIP_Node_Source": [[3, 1, 1, "", "SourceNode"]], "diplang.nodes.DIP_Node_Source.SourceNode": [[3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"], [3, 3, 1, "", "parse"]], "diplang.nodes.DIP_Node_String": [[3, 1, 1, "", "StringNode"]], "diplang.nodes.DIP_Node_String.StringNode": [[3, 2, 1, "", "format"], [3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"], [3, 2, 1, "", "options"], [3, 3, 1, "", "parse"], [3, 3, 1, "", "set_value"]], "diplang.nodes.DIP_Node_Table": [[3, 1, 1, "", "TableNode"]], "diplang.nodes.DIP_Node_Table.TableNode": [[3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"], [3, 3, 1, "", "parse"]], "diplang.nodes.DIP_Node_Unit": [[3, 1, 1, "", "UnitNode"]], "diplang.nodes.DIP_Node_Unit.UnitNode": [[3, 3, 1, "", "is_node"], [3, 2, 1, "", "keyword"], [3, 3, 1, "", "parse"]], "diplang.nodes.DIP_Parser": [[3, 1, 1, "", "Parser"]], "diplang.nodes.DIP_Parser.Parser": [[3, 2, 1, "", "ccode"], [3, 2, 1, "", "comment"], [3, 2, 1, "", "formating"], [3, 3, 1, "", "is_empty"], [3, 3, 1, "", "is_parsed"], [3, 3, 1, "", "kwd_case"], [3, 3, 1, "", "kwd_condition"], [3, 3, 1, "", "kwd_constant"], [3, 3, 1, "", "kwd_format"], [3, 3, 1, "", "kwd_options"], [3, 3, 1, "", "kwd_source"], [3, 3, 1, "", "kwd_unit"], [3, 2, 1, "", "parsed"], [3, 3, 1, "", "part_comment"], [3, 3, 1, "", "part_dimension"], [3, 3, 1, "", "part_equal"], [3, 3, 1, "", "part_expression"], [3, 3, 1, "", "part_format"], [3, 3, 1, "", "part_indent"], [3, 3, 1, "", "part_name"], [3, 3, 1, "", "part_reference"], [3, 3, 1, "", "part_slice"], [3, 3, 1, "", "part_type"], [3, 3, 1, "", "part_units"], [3, 3, 1, "", "part_value"]], "diplang.solvers": [[4, 0, 0, "-", "DIP_Solver_Logical"], [4, 0, 0, "-", "DIP_Solver_Numerical"], [4, 0, 0, "-", "DIP_Solver_Templates"], [4, 0, 0, "-", "DIP_Solver_Units"]], "diplang.solvers.DIP_Solver_Logical": [[4, 1, 1, "", "LogicalSolver"]], "diplang.solvers.DIP_Solver_Logical.LogicalSolver": [[4, 2, 1, "", "env"], [4, 3, 1, "", "solve"]], "diplang.solvers.DIP_Solver_Numerical": [[4, 1, 1, "", "NumericalSolver"]], "diplang.solvers.DIP_Solver_Numerical.NumericalSolver": [[4, 2, 1, "", "env"], [4, 3, 1, "", "equal"], [4, 3, 1, "", "solve"]], "diplang.solvers.DIP_Solver_Templates": [[4, 1, 1, "", "TemplateSolver"]], "diplang.solvers.DIP_Solver_Templates.TemplateSolver": [[4, 2, 1, "", "env"], [4, 3, 1, "", "solve"]], "diplang.solvers.DIP_Solver_Units": [[4, 1, 1, "", "UnitSolver"]], "diplang.solvers.DIP_Solver_Units.UnitSolver": [[4, 2, 1, "", "arbitrary"], [4, 2, 1, "", "base"], [4, 2, 1, "", "custom"], [4, 2, 1, "", "derivates"], [4, 2, 1, "", "nbase"], [4, 2, 1, "", "npbase"], [4, 2, 1, "", "prefixes"], [4, 3, 1, "", "solve"], [4, 3, 1, "", "unit"], [4, 2, 1, "", "units"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "content": [0, 1, 2, 3, 4, 6, 7, 11, 14], "diplang": [1, 2, 3, 4, 5], "packag": [1, 2, 3, 4], "subpackag": 1, "submodul": [1, 2, 3, 4], "dip_environ": 1, "modul": [1, 2, 3, 4], "dip_main": 1, "dip_set": 1, "dip_unit": 1, "dip_unitlist": 1, "datatyp": 2, "dip_typ": 2, "dip_type_boolean": 2, "dip_type_float": 2, "dip_type_integ": 2, "dip_type_numb": 2, "dip_type_str": 2, "node": [3, 17], "dip_nod": 3, "dip_nodebas": 3, "dip_node_boolean": 3, "dip_node_cas": 3, "dip_node_condit": 3, "dip_node_const": 3, "dip_node_empti": 3, "dip_node_float": 3, "dip_node_format": 3, "dip_node_group": 3, "dip_node_import": 3, "dip_node_integ": 3, "dip_node_mod": 3, "dip_node_opt": 3, "dip_node_sourc": 3, "dip_node_str": 3, "dip_node_t": 3, "dip_node_unit": 3, "dip_pars": 3, "solver": 4, "dip_solver_log": 4, "dip_solver_numer": 4, "dip_solver_templ": 4, "dip_solver_unit": 4, "dip": [6, 8, 9], "dimension": 6, "input": [6, 16], "paramet": 6, "indic": 6, "tabl": [6, 21], "introduct": 7, "about": 8, "exampl": 9, "us": 9, "pars": [9, 16], "code": 9, "get": 9, "data": 9, "instal": 10, "pygment": 11, "lexer": 11, "schema": 12, "highlit": [12, 13], "syntax": [13, 14], "condit": [15, 20], "express": 16, "valu": [16, 21], "logic": 16, "oper": [16, 19], "parenthesi": 16, "comparison": 16, "singl": 16, "numer": 16, "basic": 16, "parenthes": 16, "templat": 16, "definit": 17, "modif": 17, "declar": 17, "hierarchi": 17, "refer": 18, "import": 18, "inject": 18, "unit": 19, "base": 19, "prefix": 19, "deriv": 19, "si": 19, "cg": 19, "other": 19, "natur": 19, "dimensionless": 19, "custom": 19, "valid": 20, "option": 20, "format": 20, "constant": 20, "scalar": 21, "arrai": 21, "block": 21}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"API": [[0, "api"]], "Contents:": [[0, null], [6, null], [7, null], [11, null], [14, null]], "diplang package": [[1, "diplang-package"]], "Subpackages": [[1, "subpackages"]], "Submodules": [[1, "submodules"], [2, "submodules"], [3, "submodules"], [4, "submodules"]], "diplang.DIP_Environment module": [[1, "module-diplang.DIP_Environment"]], "diplang.DIP_Main module": [[1, "module-diplang.DIP_Main"]], "diplang.DIP_Settings module": [[1, "module-diplang.DIP_Settings"]], "diplang.DIP_Unit module": [[1, "module-diplang.DIP_Unit"]], "diplang.DIP_UnitList module": [[1, "module-diplang.DIP_UnitList"]], "Module contents": [[1, "module-diplang"], [2, "module-diplang.datatypes"], [3, "module-diplang.nodes"], [4, "module-diplang.solvers"]], "diplang.datatypes package": [[2, "diplang-datatypes-package"]], "diplang.datatypes.DIP_Type module": [[2, "module-diplang.datatypes.DIP_Type"]], "diplang.datatypes.DIP_Type_Boolean module": [[2, "module-diplang.datatypes.DIP_Type_Boolean"]], "diplang.datatypes.DIP_Type_Float module": [[2, "module-diplang.datatypes.DIP_Type_Float"]], "diplang.datatypes.DIP_Type_Integer module": [[2, "module-diplang.datatypes.DIP_Type_Integer"]], "diplang.datatypes.DIP_Type_Number module": [[2, "module-diplang.datatypes.DIP_Type_Number"]], "diplang.datatypes.DIP_Type_String module": [[2, "module-diplang.datatypes.DIP_Type_String"]], "diplang.nodes package": [[3, "diplang-nodes-package"]], "diplang.nodes.DIP_Node module": [[3, "module-diplang.nodes.DIP_Node"]], "diplang.nodes.DIP_NodeBase module": [[3, "module-diplang.nodes.DIP_NodeBase"]], "diplang.nodes.DIP_Node_Boolean module": [[3, "module-diplang.nodes.DIP_Node_Boolean"]], "diplang.nodes.DIP_Node_Case module": [[3, "module-diplang.nodes.DIP_Node_Case"]], "diplang.nodes.DIP_Node_Condition module": [[3, "module-diplang.nodes.DIP_Node_Condition"]], "diplang.nodes.DIP_Node_Constant module": [[3, "module-diplang.nodes.DIP_Node_Constant"]], "diplang.nodes.DIP_Node_Empty module": [[3, "module-diplang.nodes.DIP_Node_Empty"]], "diplang.nodes.DIP_Node_Float module": [[3, "module-diplang.nodes.DIP_Node_Float"]], "diplang.nodes.DIP_Node_Format module": [[3, "module-diplang.nodes.DIP_Node_Format"]], "diplang.nodes.DIP_Node_Group module": [[3, "module-diplang.nodes.DIP_Node_Group"]], "diplang.nodes.DIP_Node_Import module": [[3, "module-diplang.nodes.DIP_Node_Import"]], "diplang.nodes.DIP_Node_Integer module": [[3, "module-diplang.nodes.DIP_Node_Integer"]], "diplang.nodes.DIP_Node_Mod module": [[3, "module-diplang.nodes.DIP_Node_Mod"]], "diplang.nodes.DIP_Node_Option module": [[3, "module-diplang.nodes.DIP_Node_Option"]], "diplang.nodes.DIP_Node_Source module": [[3, "module-diplang.nodes.DIP_Node_Source"]], "diplang.nodes.DIP_Node_String module": [[3, "module-diplang.nodes.DIP_Node_String"]], "diplang.nodes.DIP_Node_Table module": [[3, "module-diplang.nodes.DIP_Node_Table"]], "diplang.nodes.DIP_Node_Unit module": [[3, "module-diplang.nodes.DIP_Node_Unit"]], "diplang.nodes.DIP_Parser module": [[3, "module-diplang.nodes.DIP_Parser"]], "diplang.solvers package": [[4, "diplang-solvers-package"]], "diplang.solvers.DIP_Solver_Logical module": [[4, "module-diplang.solvers.DIP_Solver_Logical"]], "diplang.solvers.DIP_Solver_Numerical module": [[4, "module-diplang.solvers.DIP_Solver_Numerical"]], "diplang.solvers.DIP_Solver_Templates module": [[4, "module-diplang.solvers.DIP_Solver_Templates"]], "diplang.solvers.DIP_Solver_Units module": [[4, "module-diplang.solvers.DIP_Solver_Units"]], "diplang": [[5, "diplang"]], "DIP - Dimensional Input Parameters": [[6, "dip-dimensional-input-parameters"]], "Indices and tables": [[6, "indices-and-tables"]], "Introduction": [[7, "introduction"]], "About DIP": [[8, "about-dip"]], "Example of use": [[9, "example-of-use"]], "Parsing DIP code": [[9, "parsing-dip-code"]], "Getting parsed data": [[9, "getting-parsed-data"]], "Installation": [[10, "installation"]], "Pygments lexer": [[11, "pygments-lexer"]], "Schema highliter": [[12, "schema-highliter"]], "Syntax highliter": [[13, "syntax-highliter"]], "Syntax": [[14, "syntax"]], "Conditions": [[15, "conditions"]], "Expressions": [[16, "expressions"]], "Input values": [[16, "id2"]], "Logical": [[16, "logical"]], "Logical operators": [[16, "id3"]], "Parenthesis operator": [[16, "id4"]], "Comparison operators": [[16, "id5"]], "Single value operators": [[16, "id6"]], "Numerical": [[16, "numerical"]], "Basic operations": [[16, "id7"]], "Parentheses operators": [[16, "id8"]], "Templates": [[16, "templates"]], "Parsing operators": [[16, "id9"]], "Nodes": [[17, "nodes"]], "Definition": [[17, "definition"]], "Modification": [[17, "modification"]], "Declaration": [[17, "declaration"]], "Hierarchy": [[17, "hierarchy"]], "References": [[18, "references"]], "Imports": [[18, "imports"]], "Injections": [[18, "injections"]], "Units": [[19, "units"]], "Base units": [[19, "base-units"], [19, "id1"]], "Prefixes": [[19, "prefixes"]], "Unit prefixes": [[19, "id2"]], "Derived units": [[19, "derived-units"]], "Unit operators": [[19, "id3"]], "Derived SI units": [[19, "id4"]], "Derived CGS units": [[19, "id5"]], "Other derived units": [[19, "id6"]], "Natural units": [[19, "id7"]], "Dimensionless units": [[19, "id8"]], "Custom units": [[19, "custom-units"]], "Validation": [[20, "validation"]], "Options": [[20, "options"]], "Condition": [[20, "condition"]], "Format": [[20, "format"]], "Constants": [[20, "constants"]], "Values": [[21, "values"]], "Scalars": [[21, "scalars"]], "Arrays": [[21, "arrays"]], "Blocks": [[21, "blocks"]], "Tables": [[21, "tables"]]}, "indexentries": {"convert_arbitrary() (in module diplang.dip_unitlist)": [[1, "diplang.DIP_UnitList.Convert_Arbitrary"]], "dip (class in diplang.dip_main)": [[1, "diplang.DIP_Main.DIP"]], "environment (class in diplang.dip_environment)": [[1, "diplang.DIP_Environment.Environment"]], "unit (class in diplang.dip_unit)": [[1, "diplang.DIP_Unit.Unit"]], "arbitrary (diplang.dip_unit.unit attribute)": [[1, "diplang.DIP_Unit.Unit.arbitrary"]], "autoref (diplang.dip_environment.environment attribute)": [[1, "diplang.DIP_Environment.Environment.autoref"]], "base (diplang.dip_unit.unit attribute)": [[1, "diplang.DIP_Unit.Unit.base"]], "case_counts (diplang.dip_environment.environment attribute)": [[1, "diplang.DIP_Environment.Environment.case_counts"]], "case_names (diplang.dip_environment.environment attribute)": [[1, "diplang.DIP_Environment.Environment.case_names"]], "code() (diplang.dip_main.dip method)": [[1, "diplang.DIP_Main.DIP.code"]], "copy() (diplang.dip_unit.unit method)": [[1, "diplang.DIP_Unit.Unit.copy"]], "data() (diplang.dip_environment.environment method)": [[1, "diplang.DIP_Environment.Environment.data"]], "dfn (diplang.dip_unit.unit attribute)": [[1, "diplang.DIP_Unit.Unit.dfn"]], "dimension() (diplang.dip_unit.unit method)": [[1, "diplang.DIP_Unit.Unit.dimension"]], "diplang": [[1, "module-diplang"]], "diplang.dip_environment": [[1, "module-diplang.DIP_Environment"]], "diplang.dip_main": [[1, "module-diplang.DIP_Main"]], "diplang.dip_settings": [[1, "module-diplang.DIP_Settings"]], "diplang.dip_unit": [[1, "module-diplang.DIP_Unit"]], "diplang.dip_unitlist": [[1, "module-diplang.DIP_UnitList"]], "env (diplang.dip_main.dip attribute)": [[1, "diplang.DIP_Main.DIP.env"]], "eqdim() (diplang.dip_unit.unit method)": [[1, "diplang.DIP_Unit.Unit.eqdim"]], "eqnum() (diplang.dip_unit.unit method)": [[1, "diplang.DIP_Unit.Unit.eqnum"]], "inunitsof() (diplang.dip_unit.unit method)": [[1, "diplang.DIP_Unit.Unit.inunitsof"]], "is_case() (diplang.dip_environment.environment method)": [[1, "diplang.DIP_Environment.Environment.is_case"]], "isnumeric() (diplang.dip_unit.unit method)": [[1, "diplang.DIP_Unit.Unit.isnumeric"]], "lines (diplang.dip_main.dip attribute)": [[1, "diplang.DIP_Main.DIP.lines"]], "load() (diplang.dip_main.dip method)": [[1, "diplang.DIP_Main.DIP.load"]], "module": [[1, "module-diplang"], [1, "module-diplang.DIP_Environment"], [1, "module-diplang.DIP_Main"], [1, "module-diplang.DIP_Settings"], [1, "module-diplang.DIP_Unit"], [1, "module-diplang.DIP_UnitList"], [2, "module-diplang.datatypes"], [2, "module-diplang.datatypes.DIP_Type"], [2, "module-diplang.datatypes.DIP_Type_Boolean"], [2, "module-diplang.datatypes.DIP_Type_Float"], [2, "module-diplang.datatypes.DIP_Type_Integer"], [2, "module-diplang.datatypes.DIP_Type_Number"], [2, "module-diplang.datatypes.DIP_Type_String"], [3, "module-diplang.nodes"], [3, "module-diplang.nodes.DIP_Node"], [3, "module-diplang.nodes.DIP_NodeBase"], [3, "module-diplang.nodes.DIP_Node_Boolean"], [3, "module-diplang.nodes.DIP_Node_Case"], [3, "module-diplang.nodes.DIP_Node_Condition"], [3, "module-diplang.nodes.DIP_Node_Constant"], [3, "module-diplang.nodes.DIP_Node_Empty"], [3, "module-diplang.nodes.DIP_Node_Float"], [3, "module-diplang.nodes.DIP_Node_Format"], [3, "module-diplang.nodes.DIP_Node_Group"], [3, "module-diplang.nodes.DIP_Node_Import"], [3, "module-diplang.nodes.DIP_Node_Integer"], [3, "module-diplang.nodes.DIP_Node_Mod"], [3, "module-diplang.nodes.DIP_Node_Option"], [3, "module-diplang.nodes.DIP_Node_Source"], [3, "module-diplang.nodes.DIP_Node_String"], [3, "module-diplang.nodes.DIP_Node_Table"], [3, "module-diplang.nodes.DIP_Node_Unit"], [3, "module-diplang.nodes.DIP_Parser"], [4, "module-diplang.solvers"], [4, "module-diplang.solvers.DIP_Solver_Logical"], [4, "module-diplang.solvers.DIP_Solver_Numerical"], [4, "module-diplang.solvers.DIP_Solver_Templates"], [4, "module-diplang.solvers.DIP_Solver_Units"]], "name (diplang.dip_unit.unit attribute)": [[1, "diplang.DIP_Unit.Unit.name"]], "nodes (diplang.dip_environment.environment attribute)": [[1, "diplang.DIP_Environment.Environment.nodes"]], "num (diplang.dip_unit.unit attribute)": [[1, "diplang.DIP_Unit.Unit.num"]], "number() (diplang.dip_unit.unit method)": [[1, "diplang.DIP_Unit.Unit.number"]], "parent_indents (diplang.dip_environment.environment attribute)": [[1, "diplang.DIP_Environment.Environment.parent_indents"]], "parent_names (diplang.dip_environment.environment attribute)": [[1, "diplang.DIP_Environment.Environment.parent_names"]], "parse() (diplang.dip_main.dip method)": [[1, "diplang.DIP_Main.DIP.parse"]], "pop_node() (diplang.dip_environment.environment method)": [[1, "diplang.DIP_Environment.Environment.pop_node"]], "prepare_node() (diplang.dip_environment.environment method)": [[1, "diplang.DIP_Environment.Environment.prepare_node"]], "prepend_nodes() (diplang.dip_environment.environment method)": [[1, "diplang.DIP_Environment.Environment.prepend_nodes"]], "query() (diplang.dip_environment.environment method)": [[1, "diplang.DIP_Environment.Environment.query"]], "request() (diplang.dip_environment.environment method)": [[1, "diplang.DIP_Environment.Environment.request"]], "solve_case() (diplang.dip_environment.environment method)": [[1, "diplang.DIP_Environment.Environment.solve_case"]], "source (diplang.dip_main.dip attribute)": [[1, "diplang.DIP_Main.DIP.source"]], "sources (diplang.dip_environment.environment attribute)": [[1, "diplang.DIP_Environment.Environment.sources"]], "symbol (diplang.dip_unit.unit attribute)": [[1, "diplang.DIP_Unit.Unit.symbol"]], "symbol_base (diplang.dip_unit.unit attribute)": [[1, "diplang.DIP_Unit.Unit.symbol_base"]], "units (diplang.dip_environment.environment attribute)": [[1, "diplang.DIP_Environment.Environment.units"]], "update_hierarchy() (diplang.dip_environment.environment method)": [[1, "diplang.DIP_Environment.Environment.update_hierarchy"]], "booleantype (class in diplang.datatypes.dip_type_boolean)": [[2, "diplang.datatypes.DIP_Type_Boolean.BooleanType"]], "floattype (class in diplang.datatypes.dip_type_float)": [[2, "diplang.datatypes.DIP_Type_Float.FloatType"]], "integertype (class in diplang.datatypes.dip_type_integer)": [[2, "diplang.datatypes.DIP_Type_Integer.IntegerType"]], "numbertype (class in diplang.datatypes.dip_type_number)": [[2, "diplang.datatypes.DIP_Type_Number.NumberType"]], "stringtype (class in diplang.datatypes.dip_type_string)": [[2, "diplang.datatypes.DIP_Type_String.StringType"]], "type (class in diplang.datatypes.dip_type)": [[2, "diplang.datatypes.DIP_Type.Type"]], "convert() (diplang.datatypes.dip_type_number.numbertype method)": [[2, "diplang.datatypes.DIP_Type_Number.NumberType.convert"]], "diplang.datatypes": [[2, "module-diplang.datatypes"]], "diplang.datatypes.dip_type": [[2, "module-diplang.datatypes.DIP_Type"]], "diplang.datatypes.dip_type_boolean": [[2, "module-diplang.datatypes.DIP_Type_Boolean"]], "diplang.datatypes.dip_type_float": [[2, "module-diplang.datatypes.DIP_Type_Float"]], "diplang.datatypes.dip_type_integer": [[2, "module-diplang.datatypes.DIP_Type_Integer"]], "diplang.datatypes.dip_type_number": [[2, "module-diplang.datatypes.DIP_Type_Number"]], "diplang.datatypes.dip_type_string": [[2, "module-diplang.datatypes.DIP_Type_String"]], "dtype (diplang.datatypes.dip_type_boolean.booleantype attribute)": [[2, "diplang.datatypes.DIP_Type_Boolean.BooleanType.dtype"]], "dtype (diplang.datatypes.dip_type_float.floattype attribute)": [[2, "diplang.datatypes.DIP_Type_Float.FloatType.dtype"]], "dtype (diplang.datatypes.dip_type_integer.integertype attribute)": [[2, "diplang.datatypes.DIP_Type_Integer.IntegerType.dtype"]], "dtype (diplang.datatypes.dip_type_string.stringtype attribute)": [[2, "diplang.datatypes.DIP_Type_String.StringType.dtype"]], "unit (diplang.datatypes.dip_type.type attribute)": [[2, "diplang.datatypes.DIP_Type.Type.unit"]], "value (diplang.datatypes.dip_type.type attribute)": [[2, "diplang.datatypes.DIP_Type.Type.value"]], "value (diplang.datatypes.dip_type_boolean.booleantype attribute)": [[2, "diplang.datatypes.DIP_Type_Boolean.BooleanType.value"]], "value (diplang.datatypes.dip_type_float.floattype attribute)": [[2, "diplang.datatypes.DIP_Type_Float.FloatType.value"]], "value (diplang.datatypes.dip_type_integer.integertype attribute)": [[2, "diplang.datatypes.DIP_Type_Integer.IntegerType.value"]], "value (diplang.datatypes.dip_type_string.stringtype attribute)": [[2, "diplang.datatypes.DIP_Type_String.StringType.value"]], "booleannode (class in diplang.nodes.dip_node_boolean)": [[3, "diplang.nodes.DIP_Node_Boolean.BooleanNode"]], "casenode (class in diplang.nodes.dip_node_case)": [[3, "diplang.nodes.DIP_Node_Case.CaseNode"]], "conditionnode (class in diplang.nodes.dip_node_condition)": [[3, "diplang.nodes.DIP_Node_Condition.ConditionNode"]], "constantnode (class in diplang.nodes.dip_node_constant)": [[3, "diplang.nodes.DIP_Node_Constant.ConstantNode"]], "emptynode (class in diplang.nodes.dip_node_empty)": [[3, "diplang.nodes.DIP_Node_Empty.EmptyNode"]], "floatnode (class in diplang.nodes.dip_node_float)": [[3, "diplang.nodes.DIP_Node_Float.FloatNode"]], "formatnode (class in diplang.nodes.dip_node_format)": [[3, "diplang.nodes.DIP_Node_Format.FormatNode"]], "groupnode (class in diplang.nodes.dip_node_group)": [[3, "diplang.nodes.DIP_Node_Group.GroupNode"]], "importnode (class in diplang.nodes.dip_node_import)": [[3, "diplang.nodes.DIP_Node_Import.ImportNode"]], "integernode (class in diplang.nodes.dip_node_integer)": [[3, "diplang.nodes.DIP_Node_Integer.IntegerNode"]], "modnode (class in diplang.nodes.dip_node_mod)": [[3, "diplang.nodes.DIP_Node_Mod.ModNode"]], "node (class in diplang.nodes.dip_node)": [[3, "diplang.nodes.DIP_Node.Node"]], "nodebase (class in diplang.nodes.dip_nodebase)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase"]], "optionnode (class in diplang.nodes.dip_node_option)": [[3, "diplang.nodes.DIP_Node_Option.OptionNode"]], "parser (class in diplang.nodes.dip_parser)": [[3, "diplang.nodes.DIP_Parser.Parser"]], "sourcenode (class in diplang.nodes.dip_node_source)": [[3, "diplang.nodes.DIP_Node_Source.SourceNode"]], "stringnode (class in diplang.nodes.dip_node_string)": [[3, "diplang.nodes.DIP_Node_String.StringNode"]], "tablenode (class in diplang.nodes.dip_node_table)": [[3, "diplang.nodes.DIP_Node_Table.TableNode"]], "unitnode (class in diplang.nodes.dip_node_unit)": [[3, "diplang.nodes.DIP_Node_Unit.UnitNode"]], "cast_value() (diplang.nodes.dip_node.node method)": [[3, "diplang.nodes.DIP_Node.Node.cast_value"]], "ccode (diplang.nodes.dip_parser.parser attribute)": [[3, "diplang.nodes.DIP_Parser.Parser.ccode"]], "code (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.code"]], "comment (diplang.nodes.dip_parser.parser attribute)": [[3, "diplang.nodes.DIP_Parser.Parser.comment"]], "condition (diplang.nodes.dip_node.node attribute)": [[3, "diplang.nodes.DIP_Node.Node.condition"]], "constant (diplang.nodes.dip_node.node attribute)": [[3, "diplang.nodes.DIP_Node.Node.constant"]], "defined (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.defined"]], "dimension (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.dimension"]], "diplang.nodes": [[3, "module-diplang.nodes"]], "diplang.nodes.dip_node": [[3, "module-diplang.nodes.DIP_Node"]], "diplang.nodes.dip_nodebase": [[3, "module-diplang.nodes.DIP_NodeBase"]], "diplang.nodes.dip_node_boolean": [[3, "module-diplang.nodes.DIP_Node_Boolean"]], "diplang.nodes.dip_node_case": [[3, "module-diplang.nodes.DIP_Node_Case"]], "diplang.nodes.dip_node_condition": [[3, "module-diplang.nodes.DIP_Node_Condition"]], "diplang.nodes.dip_node_constant": [[3, "module-diplang.nodes.DIP_Node_Constant"]], "diplang.nodes.dip_node_empty": [[3, "module-diplang.nodes.DIP_Node_Empty"]], "diplang.nodes.dip_node_float": [[3, "module-diplang.nodes.DIP_Node_Float"]], "diplang.nodes.dip_node_format": [[3, "module-diplang.nodes.DIP_Node_Format"]], "diplang.nodes.dip_node_group": [[3, "module-diplang.nodes.DIP_Node_Group"]], "diplang.nodes.dip_node_import": [[3, "module-diplang.nodes.DIP_Node_Import"]], "diplang.nodes.dip_node_integer": [[3, "module-diplang.nodes.DIP_Node_Integer"]], "diplang.nodes.dip_node_mod": [[3, "module-diplang.nodes.DIP_Node_Mod"]], "diplang.nodes.dip_node_option": [[3, "module-diplang.nodes.DIP_Node_Option"]], "diplang.nodes.dip_node_source": [[3, "module-diplang.nodes.DIP_Node_Source"]], "diplang.nodes.dip_node_string": [[3, "module-diplang.nodes.DIP_Node_String"]], "diplang.nodes.dip_node_table": [[3, "module-diplang.nodes.DIP_Node_Table"]], "diplang.nodes.dip_node_unit": [[3, "module-diplang.nodes.DIP_Node_Unit"]], "diplang.nodes.dip_parser": [[3, "module-diplang.nodes.DIP_Parser"]], "dtype (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.dtype"]], "dtype (diplang.nodes.dip_node_boolean.booleannode attribute)": [[3, "diplang.nodes.DIP_Node_Boolean.BooleanNode.dtype"]], "dtype (diplang.nodes.dip_node_float.floatnode attribute)": [[3, "diplang.nodes.DIP_Node_Float.FloatNode.dtype"]], "dtype (diplang.nodes.dip_node_integer.integernode attribute)": [[3, "diplang.nodes.DIP_Node_Integer.IntegerNode.dtype"]], "format (diplang.nodes.dip_node_string.stringnode attribute)": [[3, "diplang.nodes.DIP_Node_String.StringNode.format"]], "formating (diplang.nodes.dip_parser.parser attribute)": [[3, "diplang.nodes.DIP_Parser.Parser.formating"]], "indent (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.indent"]], "inject_value() (diplang.nodes.dip_node.node method)": [[3, "diplang.nodes.DIP_Node.Node.inject_value"]], "inject_value() (diplang.nodes.dip_node_import.importnode method)": [[3, "diplang.nodes.DIP_Node_Import.ImportNode.inject_value"]], "is_empty() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.is_empty"]], "is_node() (diplang.nodes.dip_node_boolean.booleannode static method)": [[3, "diplang.nodes.DIP_Node_Boolean.BooleanNode.is_node"]], "is_node() (diplang.nodes.dip_node_case.casenode static method)": [[3, "diplang.nodes.DIP_Node_Case.CaseNode.is_node"]], "is_node() (diplang.nodes.dip_node_condition.conditionnode static method)": [[3, "diplang.nodes.DIP_Node_Condition.ConditionNode.is_node"]], "is_node() (diplang.nodes.dip_node_constant.constantnode static method)": [[3, "diplang.nodes.DIP_Node_Constant.ConstantNode.is_node"]], "is_node() (diplang.nodes.dip_node_empty.emptynode static method)": [[3, "diplang.nodes.DIP_Node_Empty.EmptyNode.is_node"]], "is_node() (diplang.nodes.dip_node_float.floatnode static method)": [[3, "diplang.nodes.DIP_Node_Float.FloatNode.is_node"]], "is_node() (diplang.nodes.dip_node_format.formatnode static method)": [[3, "diplang.nodes.DIP_Node_Format.FormatNode.is_node"]], "is_node() (diplang.nodes.dip_node_group.groupnode static method)": [[3, "diplang.nodes.DIP_Node_Group.GroupNode.is_node"]], "is_node() (diplang.nodes.dip_node_import.importnode method)": [[3, "diplang.nodes.DIP_Node_Import.ImportNode.is_node"]], "is_node() (diplang.nodes.dip_node_integer.integernode static method)": [[3, "diplang.nodes.DIP_Node_Integer.IntegerNode.is_node"]], "is_node() (diplang.nodes.dip_node_mod.modnode static method)": [[3, "diplang.nodes.DIP_Node_Mod.ModNode.is_node"]], "is_node() (diplang.nodes.dip_node_option.optionnode static method)": [[3, "diplang.nodes.DIP_Node_Option.OptionNode.is_node"]], "is_node() (diplang.nodes.dip_node_source.sourcenode static method)": [[3, "diplang.nodes.DIP_Node_Source.SourceNode.is_node"]], "is_node() (diplang.nodes.dip_node_string.stringnode static method)": [[3, "diplang.nodes.DIP_Node_String.StringNode.is_node"]], "is_node() (diplang.nodes.dip_node_table.tablenode static method)": [[3, "diplang.nodes.DIP_Node_Table.TableNode.is_node"]], "is_node() (diplang.nodes.dip_node_unit.unitnode static method)": [[3, "diplang.nodes.DIP_Node_Unit.UnitNode.is_node"]], "is_parsed() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.is_parsed"]], "keyword (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.keyword"]], "keyword (diplang.nodes.dip_node_boolean.booleannode attribute)": [[3, "diplang.nodes.DIP_Node_Boolean.BooleanNode.keyword"]], "keyword (diplang.nodes.dip_node_case.casenode attribute)": [[3, "diplang.nodes.DIP_Node_Case.CaseNode.keyword"]], "keyword (diplang.nodes.dip_node_condition.conditionnode attribute)": [[3, "diplang.nodes.DIP_Node_Condition.ConditionNode.keyword"]], "keyword (diplang.nodes.dip_node_constant.constantnode attribute)": [[3, "diplang.nodes.DIP_Node_Constant.ConstantNode.keyword"]], "keyword (diplang.nodes.dip_node_empty.emptynode attribute)": [[3, "diplang.nodes.DIP_Node_Empty.EmptyNode.keyword"]], "keyword (diplang.nodes.dip_node_float.floatnode attribute)": [[3, "diplang.nodes.DIP_Node_Float.FloatNode.keyword"]], "keyword (diplang.nodes.dip_node_format.formatnode attribute)": [[3, "diplang.nodes.DIP_Node_Format.FormatNode.keyword"]], "keyword (diplang.nodes.dip_node_group.groupnode attribute)": [[3, "diplang.nodes.DIP_Node_Group.GroupNode.keyword"]], "keyword (diplang.nodes.dip_node_import.importnode attribute)": [[3, "diplang.nodes.DIP_Node_Import.ImportNode.keyword"]], "keyword (diplang.nodes.dip_node_integer.integernode attribute)": [[3, "diplang.nodes.DIP_Node_Integer.IntegerNode.keyword"]], "keyword (diplang.nodes.dip_node_mod.modnode attribute)": [[3, "diplang.nodes.DIP_Node_Mod.ModNode.keyword"]], "keyword (diplang.nodes.dip_node_option.optionnode attribute)": [[3, "diplang.nodes.DIP_Node_Option.OptionNode.keyword"]], "keyword (diplang.nodes.dip_node_source.sourcenode attribute)": [[3, "diplang.nodes.DIP_Node_Source.SourceNode.keyword"]], "keyword (diplang.nodes.dip_node_string.stringnode attribute)": [[3, "diplang.nodes.DIP_Node_String.StringNode.keyword"]], "keyword (diplang.nodes.dip_node_table.tablenode attribute)": [[3, "diplang.nodes.DIP_Node_Table.TableNode.keyword"]], "keyword (diplang.nodes.dip_node_unit.unitnode attribute)": [[3, "diplang.nodes.DIP_Node_Unit.UnitNode.keyword"]], "kwd_case() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.kwd_case"]], "kwd_condition() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.kwd_condition"]], "kwd_constant() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.kwd_constant"]], "kwd_format() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.kwd_format"]], "kwd_options() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.kwd_options"]], "kwd_source() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.kwd_source"]], "kwd_unit() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.kwd_unit"]], "line (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.line"]], "modify_value() (diplang.nodes.dip_node.node method)": [[3, "diplang.nodes.DIP_Node.Node.modify_value"]], "name (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.name"]], "options (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.options"]], "options (diplang.nodes.dip_node_float.floatnode attribute)": [[3, "diplang.nodes.DIP_Node_Float.FloatNode.options"]], "options (diplang.nodes.dip_node_integer.integernode attribute)": [[3, "diplang.nodes.DIP_Node_Integer.IntegerNode.options"]], "options (diplang.nodes.dip_node_string.stringnode attribute)": [[3, "diplang.nodes.DIP_Node_String.StringNode.options"]], "parse() (diplang.nodes.dip_node.node method)": [[3, "diplang.nodes.DIP_Node.Node.parse"]], "parse() (diplang.nodes.dip_node_boolean.booleannode method)": [[3, "diplang.nodes.DIP_Node_Boolean.BooleanNode.parse"]], "parse() (diplang.nodes.dip_node_case.casenode method)": [[3, "diplang.nodes.DIP_Node_Case.CaseNode.parse"]], "parse() (diplang.nodes.dip_node_condition.conditionnode method)": [[3, "diplang.nodes.DIP_Node_Condition.ConditionNode.parse"]], "parse() (diplang.nodes.dip_node_constant.constantnode method)": [[3, "diplang.nodes.DIP_Node_Constant.ConstantNode.parse"]], "parse() (diplang.nodes.dip_node_float.floatnode method)": [[3, "diplang.nodes.DIP_Node_Float.FloatNode.parse"]], "parse() (diplang.nodes.dip_node_format.formatnode method)": [[3, "diplang.nodes.DIP_Node_Format.FormatNode.parse"]], "parse() (diplang.nodes.dip_node_import.importnode method)": [[3, "diplang.nodes.DIP_Node_Import.ImportNode.parse"]], "parse() (diplang.nodes.dip_node_integer.integernode method)": [[3, "diplang.nodes.DIP_Node_Integer.IntegerNode.parse"]], "parse() (diplang.nodes.dip_node_mod.modnode method)": [[3, "diplang.nodes.DIP_Node_Mod.ModNode.parse"]], "parse() (diplang.nodes.dip_node_option.optionnode method)": [[3, "diplang.nodes.DIP_Node_Option.OptionNode.parse"]], "parse() (diplang.nodes.dip_node_source.sourcenode method)": [[3, "diplang.nodes.DIP_Node_Source.SourceNode.parse"]], "parse() (diplang.nodes.dip_node_string.stringnode method)": [[3, "diplang.nodes.DIP_Node_String.StringNode.parse"]], "parse() (diplang.nodes.dip_node_table.tablenode method)": [[3, "diplang.nodes.DIP_Node_Table.TableNode.parse"]], "parse() (diplang.nodes.dip_node_unit.unitnode method)": [[3, "diplang.nodes.DIP_Node_Unit.UnitNode.parse"]], "parsed (diplang.nodes.dip_parser.parser attribute)": [[3, "diplang.nodes.DIP_Parser.Parser.parsed"]], "part_comment() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.part_comment"]], "part_dimension() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.part_dimension"]], "part_equal() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.part_equal"]], "part_expression() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.part_expression"]], "part_format() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.part_format"]], "part_indent() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.part_indent"]], "part_name() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.part_name"]], "part_reference() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.part_reference"]], "part_slice() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.part_slice"]], "part_type() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.part_type"]], "part_units() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.part_units"]], "part_value() (diplang.nodes.dip_parser.parser method)": [[3, "diplang.nodes.DIP_Parser.Parser.part_value"]], "set_option() (diplang.nodes.dip_node.node method)": [[3, "diplang.nodes.DIP_Node.Node.set_option"]], "set_value() (diplang.nodes.dip_node.node method)": [[3, "diplang.nodes.DIP_Node.Node.set_value"]], "set_value() (diplang.nodes.dip_node_boolean.booleannode method)": [[3, "diplang.nodes.DIP_Node_Boolean.BooleanNode.set_value"]], "set_value() (diplang.nodes.dip_node_float.floatnode method)": [[3, "diplang.nodes.DIP_Node_Float.FloatNode.set_value"]], "set_value() (diplang.nodes.dip_node_integer.integernode method)": [[3, "diplang.nodes.DIP_Node_Integer.IntegerNode.set_value"]], "set_value() (diplang.nodes.dip_node_string.stringnode method)": [[3, "diplang.nodes.DIP_Node_String.StringNode.set_value"]], "slice_value() (diplang.nodes.dip_node.node method)": [[3, "diplang.nodes.DIP_Node.Node.slice_value"]], "source (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.source"]], "units_raw (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.units_raw"]], "value (diplang.nodes.dip_node.node attribute)": [[3, "diplang.nodes.DIP_Node.Node.value"]], "value (diplang.nodes.dip_node_boolean.booleannode attribute)": [[3, "diplang.nodes.DIP_Node_Boolean.BooleanNode.value"]], "value (diplang.nodes.dip_node_float.floatnode attribute)": [[3, "diplang.nodes.DIP_Node_Float.FloatNode.value"]], "value (diplang.nodes.dip_node_integer.integernode attribute)": [[3, "diplang.nodes.DIP_Node_Integer.IntegerNode.value"]], "value_expr (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.value_expr"]], "value_expr (diplang.nodes.dip_node_float.floatnode attribute)": [[3, "diplang.nodes.DIP_Node_Float.FloatNode.value_expr"]], "value_expr (diplang.nodes.dip_node_integer.integernode attribute)": [[3, "diplang.nodes.DIP_Node_Integer.IntegerNode.value_expr"]], "value_raw (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.value_raw"]], "value_ref (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.value_ref"]], "value_slice (diplang.nodes.dip_nodebase.nodebase attribute)": [[3, "diplang.nodes.DIP_NodeBase.NodeBase.value_slice"]], "logicalsolver (class in diplang.solvers.dip_solver_logical)": [[4, "diplang.solvers.DIP_Solver_Logical.LogicalSolver"]], "numericalsolver (class in diplang.solvers.dip_solver_numerical)": [[4, "diplang.solvers.DIP_Solver_Numerical.NumericalSolver"]], "templatesolver (class in diplang.solvers.dip_solver_templates)": [[4, "diplang.solvers.DIP_Solver_Templates.TemplateSolver"]], "unitsolver (class in diplang.solvers.dip_solver_units)": [[4, "diplang.solvers.DIP_Solver_Units.UnitSolver"]], "arbitrary (diplang.solvers.dip_solver_units.unitsolver attribute)": [[4, "diplang.solvers.DIP_Solver_Units.UnitSolver.arbitrary"]], "base (diplang.solvers.dip_solver_units.unitsolver attribute)": [[4, "diplang.solvers.DIP_Solver_Units.UnitSolver.base"]], "custom (diplang.solvers.dip_solver_units.unitsolver attribute)": [[4, "diplang.solvers.DIP_Solver_Units.UnitSolver.custom"]], "derivates (diplang.solvers.dip_solver_units.unitsolver attribute)": [[4, "diplang.solvers.DIP_Solver_Units.UnitSolver.derivates"]], "diplang.solvers": [[4, "module-diplang.solvers"]], "diplang.solvers.dip_solver_logical": [[4, "module-diplang.solvers.DIP_Solver_Logical"]], "diplang.solvers.dip_solver_numerical": [[4, "module-diplang.solvers.DIP_Solver_Numerical"]], "diplang.solvers.dip_solver_templates": [[4, "module-diplang.solvers.DIP_Solver_Templates"]], "diplang.solvers.dip_solver_units": [[4, "module-diplang.solvers.DIP_Solver_Units"]], "env (diplang.solvers.dip_solver_logical.logicalsolver attribute)": [[4, "diplang.solvers.DIP_Solver_Logical.LogicalSolver.env"]], "env (diplang.solvers.dip_solver_numerical.numericalsolver attribute)": [[4, "diplang.solvers.DIP_Solver_Numerical.NumericalSolver.env"]], "env (diplang.solvers.dip_solver_templates.templatesolver attribute)": [[4, "diplang.solvers.DIP_Solver_Templates.TemplateSolver.env"]], "equal() (diplang.solvers.dip_solver_numerical.numericalsolver method)": [[4, "diplang.solvers.DIP_Solver_Numerical.NumericalSolver.equal"]], "nbase (diplang.solvers.dip_solver_units.unitsolver attribute)": [[4, "diplang.solvers.DIP_Solver_Units.UnitSolver.nbase"]], "npbase (diplang.solvers.dip_solver_units.unitsolver attribute)": [[4, "diplang.solvers.DIP_Solver_Units.UnitSolver.npbase"]], "prefixes (diplang.solvers.dip_solver_units.unitsolver attribute)": [[4, "diplang.solvers.DIP_Solver_Units.UnitSolver.prefixes"]], "solve() (diplang.solvers.dip_solver_logical.logicalsolver method)": [[4, "diplang.solvers.DIP_Solver_Logical.LogicalSolver.solve"]], "solve() (diplang.solvers.dip_solver_numerical.numericalsolver method)": [[4, "diplang.solvers.DIP_Solver_Numerical.NumericalSolver.solve"]], "solve() (diplang.solvers.dip_solver_templates.templatesolver method)": [[4, "diplang.solvers.DIP_Solver_Templates.TemplateSolver.solve"]], "solve() (diplang.solvers.dip_solver_units.unitsolver method)": [[4, "diplang.solvers.DIP_Solver_Units.UnitSolver.solve"]], "unit() (diplang.solvers.dip_solver_units.unitsolver method)": [[4, "diplang.solvers.DIP_Solver_Units.UnitSolver.unit"]], "units (diplang.solvers.dip_solver_units.unitsolver attribute)": [[4, "diplang.solvers.DIP_Solver_Units.UnitSolver.units"]]}})